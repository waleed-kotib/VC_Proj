# Media.tcl --##       This file is part of The Coccinella application.#       Handles image/audio/video supporting packages.#       No specific whiteboard code.#       #  Copyright (c) 2007  Mats Bengtsson#  # $Id: Media.tcl,v 1.1 2007-03-11 14:38:49 matben Exp $package provide Media 1.0namespace eval ::Media {        # Must be run before the whiteboard Types hook!    ::hooks::register  earlyInitHook  ::Media::EarlyInitHook        # Map the mime types for each package.    variable package2Mime        # Inverse mapping: mime to list of packages.    variable mime2PackageL    variable loaded        # Search only for packages on platforms they can live on.    variable packages2Platform    array set packages2Platform {	QuickTimeTcl       {macosx      windows} 	snack              {windows     unix}	Img                {windows     unix}	tkpng              {macosx      windows     unix}    }    variable helpers2Platform    array set helpers2Platform {xanim unix}     # Collect the supported mime types for each mime base.    variable supportedMime        set supportedMime(text)        text/plain    set supportedMime(image)       {}    set supportedMime(audio)       {}    set supportedMime(video)       {}    set supportedMime(application) {}    set supportedMime(all)         $supportedMime(text)}proc ::Media::GetPlatformsForPackage {name} {    variable packages2Platform    if {[info exists packages2Platform($name)]} {	return $packages2Platform($name)    } else {	return [list]    }}proc ::Media::EarlyInitHook {} {        # Init the standard media packages.    Tk    QuickTimeTcl    Snack    Img    TkPNG    Xanim        LoadPackages    MakeMime2Package    CompileMimes}proc ::Media::Tk {} {    variable package2Mime        variable loaded    set loaded(tk) 1    set package2Mime(tk) {	image/gif  image/x-portable-pixmap    }}proc ::Media::QuickTimeTcl {} {    variable package2Mime    variable loaded    set loaded(QuickTimeTcl) 0    set package2Mime(QuickTimeTcl) {	video/quicktime     video/x-dv          video/mpeg	video/mpeg4         video/flc	video/x-mpeg        audio/mpeg          audio/x-mpeg	video/x-msvideo     application/sdp     audio/aiff	audio/x-aiff        audio/basic         audio/x-sd2	audio/wav           audio/x-wav         image/x-bmp	image/vnd.fpx       image/gif           image/jpeg	image/x-macpaint    image/x-photoshop   image/png	image/x-png         image/pict          image/x-sgi	image/x-targa       image/tiff          image/x-tiff	application/x-world 	application/x-3dmf  	application/x-shockwave-flash           audio/midi	audio/x-midi        audio/vnd.qcelp     video/avi    }}    proc ::Media::Snack {} {    variable package2Mime    variable loaded    set loaded(snack) 0    set package2Mime(snack) {	audio/wav           audio/x-wav         audio/basic	audio/aiff          audio/x-aiff        audio/mpeg	audio/x-mpeg    }}proc ::Media::Img {} {    variable package2Mime    variable loaded    set loaded(Img) 0    set package2Mime(Img) {	image/x-bmp         image/gif           image/jpeg	image/png           image/x-png         image/tiff	image/x-tiff    }}    proc ::Media::TkPNG {} {    variable package2Mime    variable loaded    set loaded(tkpng) 0    set package2Mime(tkpng) {	image/png           image/x-png    }}    proc ::Media::Xanim {} {    variable package2Mime    variable loaded    set loaded(xanim) 0    set package2Mime(xanim) {	audio/wav           audio/x-wav         video/mpeg	video/x-mpeg        audio/mpeg          audio/x-mpeg	audio/basic         video/quicktime    }}    proc ::Media::LoadPackages {} {    global  this    variable packages2Platform    variable loaded        foreach name [array names packages2Platform] {	if {[lsearch $packages2Platform($name) $this(platform)] >= 0} {	    ::Splash::SetMsg "[mc splashlook] $name..."	    if {![catch {		package require $name	    }]} {		set loaded($name) 1	    }	}    } }    proc ::Media::MakeMime2Package {} {    variable package2Mime    variable mime2PackageL    variable loaded    unset -nocomplain mime2PackageL    foreach {name mimeL} [array get package2Mime] {	if {$loaded($name)} {	    foreach mime $mimeL {		lappend mime2PackageL($mime) $name	    }	}    }}proc ::Media::GetMimesForPackage {name} {    variable package2Mime    if {[info exists package2Mime($name)]} {	return $package2Mime($name)    } else {	return [list]    }}    proc ::Media::HavePackage {name} {    variable loaded    if {[info exists loaded($name)] && $loaded($name)} {	return 1    } else {	return 0    }}proc ::Media::HaveImporterForMime {mime} {    variable mime2PackageL    if {[info exists mime2PackageL($mime)] && [llength $mime2PackageL($mime)]} {	return 1    } else {	return 0    }}proc ::Media::GetPackageListForMime {mime} {    variable mime2PackageL    if {[info exists mime2PackageL($mime)]} {	return $mime2PackageL($mime)    } else {	return [list]    }}proc ::Media::CompileMimes {} {    variable package2Mime    variable supportedMime    variable loaded    unset -nocomplain supportedMime    foreach {name isloaded} [array get loaded] {	if {!$isloaded} { continue }	foreach mime $package2Mime($name) {	    set base [lindex [split $mime /] 0]	    lappend supportedMime($base) $mime	}    }    set all [list]    foreach base [array names supportedMime] {	set supportedMime($base) [lsort -unique $supportedMime($base)]	set all [concat $all $supportedMime($base)]    }    set supportedMime(all) [lsort -unique $all]}proc ::Media::GetSupportedMimesForBase {base} {    variable supportedMime    if {[info exists supportedMime($base)]} {	return $supportedMime($base)    } else {	return [list]    }}