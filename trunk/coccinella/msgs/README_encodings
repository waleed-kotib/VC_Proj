
README for language encodings
-----------------------------

If you write your language specific message catalog saving it
using the system encodings, which is likely unless you have an
editor producing utf-8 text, you need to translate it using
the utf-8 encoding. If you don't you'll se a number of '?'
for your national characters.

This directory also contains an 'extract.tcl' script written by
Vincent Ricard which extracts all translatable text strings from the sources
and compares them with an existing catalog. I'm not completely sure
how this works, seems to be missing dynamic strings like [mc $name] etc.

Instructions:

1.   Copy the en.msg file to a file name describing your language code
and platform. Say, "fr.win" for French on Windows. As an alternative
you can take the Swedish message catalog, "sv.msg", as a template.

2.   Open it in your text editor. This file should be readable.
Now you edit it in your system encoding. Change all occurences of
"::msgcat::mcset en" to "::msgcat::mcset fr" if on a French system,
for instance. The syntax for each entry in a message catalog is:
::msgcat::mcset langCode key ?translatedString?
Add the 'translatedString' if missing, and do translate if exists.
Save your file as 'fr.sys', for instance.

3.  Utf-8 encode the file using the script below. Now you pick a file
name 'fr.msg' if French, for instance. Alternatively, use the 'iconv'
command on unix/linux, or use an editor that handles utf-8.
The 'iconv' utility on unix/linux is an alternative.

4.  You new language catalog should now be loaded automatically.

5.  As a check that all entries in your message catalog exists you
may use the small script at the end of this file.

Now try it...

Use the following code to do this:

........................................................................

# Translate a file from system encoding to utf-8

set src [tk_getOpenFile -title {Pick your language catalog}]
if {$src == ""} return
set new [file rootname [file tail $src]].msg
set fdsrc [open $src "r"]
set txt [read $fdsrc];
close $fdsrc
set dst [tk_getSaveFile -title {Pick new catalog}  \
	-initialdir [file dirname $src] -initialfile $new]
if {$dst == ""} return
set fddst [open $dst "w"]
fconfigure $fddst -encoding utf-8
puts $fddst $txt
close $fddst

........................................................................


# If you for some reason want to translate any of the message catalogs
# that are utf-8 encoded to your system encoding do:

set src [tk_getOpenFile -title {Pick your utf-8 language catalog} \
	-filetypes {{{Message Catalogs}       {.msg}}}]
set suff [string range $::tcl_platform(platform) 0 2]
set new "[file rootname [file tail $src]].${suff}"
set fdsrc [open $src "r"]
fconfigure $fdsrc -encoding utf-8
set txt [read $fdsrc];
close $fdsrc
set dst [tk_getSaveFile -title {Save system encoded}  \
	-initialdir [file dirname $src] -initialfile $new]
set fddst [open $dst "w"]
puts $fddst $txt
close $fddst
if {$::tcl_platform(platform) == "macintosh"} {
    set creator [file attributes $src -creator]
    file attributes $dst -creator $creator
}

........................................................................

# If you want to compare an existing message catalog with the original
# en.msg to see if any parts missing use the script below.


namespace eval ::msgcat:: {}
if {[llength [info commands ::msgcat::mcset]]} {
    rename ::msgcat::mcset ::msgcat::mcset_tmp
}
array unset table
array unset uidc

proc ::msgcat::mcset {lang key {str ""}} {
    global table uidc

    set uid [incr uidc($lang)]
    set table(uid,$lang,$key) $uid
    set table(iuid,$lang,$uid) $key
    set table(str,$lang,$key) $str
    set table(ns,$lang,$key) [uplevel 1 {namespace current}]
    #if {$lang == "en"} {puts "uid=$uid, key=$key"}
}
proc evalcatalog {f} {
    set fd [open $f "r"]
    fconfigure $fd -encoding utf-8
    uplevel 1 [read $fd]
    close $fd
}

if {1} {
    set dir [tk_chooseDirectory -title {Pick Catalog Directory}]
    if {$dir == ""} return
} else {
    set dir [file dirname [info script]]
}
cd $dir
if {![file exists en.msg]} {
    tk_messageBox -message "Directory $dir does not contain en.msg"
    return
}
set uidc(en) 0
evalcatalog en.msg

set files [glob *.msg]
#foreach f $files
foreach f pl.msg {
    if {$f == "en.msg"} continue
    if {[string match *_new.msg $f]} continue
    set lang [file rootname [file tail $f]]
    set uidc($lang) 0
    puts "Processing $lang file $f"
    evalcatalog $f
    set missinguids {}
    foreach name [lsort [array names table ns,en,*]] {
	regexp {ns,en,(.*)} $name match key
	if {![info exists table(ns,$lang,$key)]} {
	    lappend missinguids $table(uid,en,$key)
	    puts "\t missing: $key"
	} elseif {$table(ns,en,$key) != $table(ns,$lang,$key)} {
	    puts "\t wrong namespace: $key, \t $table(ns,$lang,$key) -> $table(ns,en,$key)"
	}
    }

    # Print template missing entries.
    foreach uid [lsort -integer $missinguids] {
        set key  $table(iuid,en,$uid)
	set str  $table(str,en,$key)
        #puts "# [list ::msgcat::mcset $lang $key $str]"
	if {$str eq ""} {
	    puts "[list ::msgcat::mcset $lang $key]"
	} else {
	    puts "[list ::msgcat::mcset $lang $key $str]"
	}
    }

    # If you want to create "patched" catalogs.
    # Wrong encoding. NOT YET WORKING!!!
    if {0} {
	unset -nocomplain key2idx

	# Read old first line by line.
	set fd [open $f "r"]
	fconfigure $fd -encoding utf-8
	set lines [split [read $fd] \n]
	close $fd

	# Join multiple lines.
	set tmp {}
	set multi 0
	foreach line $lines {
	    if {$multi} {
		set pline [string trimright [lindex $tmp end] \\]
		lset tmp end "$pline [string trimleft $line]"
	    } else {
		lappend tmp $line
	    }
	    if {[regexp {.*\\$} $line]} {
		set multi 1
	    } else {
		set multi 0
	    }
	}
	set lines $tmp
	
	# Map key to line index.
	set idx 0
	foreach line $lines {
	    if {[regexp {[ \t]*::msgcat::mcset} $line]} {
		foreach {cmd l k} $line break
		set key2idx($k) $idx
	    }
	    incr idx
	}
	set missinguids [lsort -integer -decreasing $missinguids]
	
	foreach uid $missinguids {
	    set key  $table(iuid,en,$uid)
	    set akey $table(iuid,en,[expr $uid+1])
	    set pat [string map [list @lang $lang @key $akey] \
	      {[ \t]*::msgcat::mcset +@lang +@key[\n\t ]}]
	    set idx [lsearch -regexp $lines $pat]
	    puts "idx=$idx, key=$key, akey=$akey"
	    
	    set str $table(str,en,$key)
	    set line "#::msgcat::mcset [list $lang $key $str]"
	    set lines [linsert $lines $idx $line]
	}
	
	# New catalog.
	set new [file join $dir ${lang}_new.msg]
	set fd [open $new w]
	fconfigure $fd -encoding utf-8
	foreach line $lines {
	    puts $fd $line
	}
	close $fd
	puts "missinguids=$missinguids"
	break
    }
}

rename ::msgcat::mcset ""
rename ::msgcat::mcset_tmp ::msgcat::mcset

#........................................................................
