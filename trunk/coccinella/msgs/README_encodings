
README for language catalogs
----------------------------

Howto make a new language catalog or to update an existing.

Instructions (for unix systems):

1.  Check out the 'tools' module of coccinella as:
      cvs -d:pserver:anonymous@coccinella.cvs.sourceforge.net:/cvsroot/coccinella login
      cvs -z3 -d:pserver:anonymous@coccinella.cvs.sourceforge.net:/cvsroot/coccinella co -P tools

2.  In tools/i18n/ you will find several tools that assist in making 
    and analyzing message catalogs. Make sure the scripts are executable
    before you use them.

3.  Make sure you are in the coccinella source tree by 'cd coccinella/'.
    Find the tools/i18n/template.tcl script and move it to coccinella/ or
    use its full path when executing it.

    If you already have an existing language catalog, named xx.msg, you
    update it using:

    ./template.tcl msgs/en.msg xx -targetfile msgs/xx.msg -sourcedir . -printreferencestrings 1

    You can play around with the switches and see what they do. Read the 
    sources of template.tcl for the definite guide. If you don't already
    have a catalog, then do:
        
    ./template.tcl msgs/en.msg xx -sourcedir . -printreferencestrings 1

    Both scripts produce a templete catalog 'template-xx.msg' in your
    current directory. Move it to the msg/ directory for testing. 
    Make sure you don't overwrite any existing catalog you want to save:

    mv template-xx.msg msgs/xx.msg

4.  Now you need an editor that has the capabilities to handle utf-8
    encoding because that is what is used throughout. There are some scripts
    below that can transform a text file back and forth, but safest is to
    use an editor. Alternatively, use the 'iconv' command on unix/linux.
    On linux there is an editor named Kate which seems good. Be sure it uses
    utf-8, menu: Tools/Encoding/Unicode (utf8).

5.  Now it is up to you to load up with coffein to suit your mood, and start
    authoring. The syntax for each entry in a message catalog is:
        ::msgcat::mcset langCode key ?translatedString?
    Add the 'translatedString' if missing, and do translate if exists.
    Be sure that the 'translatedString' is enclosed in "{" and "}".

    Note that some of the menu strings, typically of the form mMenuEntry, have 
    an ampersand "&" in their text string. This says that the character
    following it will be underlined and the "&" be removed from display text.
    The underlined character corresponds to a keyboard shortcut for that entry.
    You are free to pick the underlined character which suits your language 
    yourself.

6.  Your new language catalog should now be loaded automatically.

7.  Some components and packages have their own catalogs inside
    coccinella/msgs/components, see the README-msgs-components file inside
    this directory. The process is essentially repeated for each directory.

Now try it...


........................................................................

# Translate a file from system encoding to utf-8

set src [tk_getOpenFile -title {Pick your language catalog}]
if {$src == ""} return
set new [file rootname [file tail $src]].msg
set fdsrc [open $src "r"]
set txt [read $fdsrc];
close $fdsrc
set dst [tk_getSaveFile -title {Pick new catalog}  \
	-initialdir [file dirname $src] -initialfile $new]
if {$dst == ""} return
set fddst [open $dst "w"]
fconfigure $fddst -encoding utf-8
puts $fddst $txt
close $fddst

........................................................................


# If you for some reason want to translate any of the message catalogs
# that are utf-8 encoded to your system encoding do:

set src [tk_getOpenFile -title {Pick your utf-8 language catalog} \
	-filetypes {{{Message Catalogs}       {.msg}}}]
set suff [string range $::tcl_platform(platform) 0 2]
set new "[file rootname [file tail $src]].${suff}"
set fdsrc [open $src "r"]
fconfigure $fdsrc -encoding utf-8
set txt [read $fdsrc];
close $fdsrc
set dst [tk_getSaveFile -title {Save system encoded}  \
	-initialdir [file dirname $src] -initialfile $new]
set fddst [open $dst "w"]
puts $fddst $txt
close $fddst

........................................................................

